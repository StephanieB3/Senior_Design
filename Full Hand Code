#include <Servo.h>

// Servo objects
Servo servo1;  // Thumb
Servo servo2;  // Index finger
Servo servo3;  // Middle finger
Servo servo4;  // Ring finger
Servo servo5;  // Pinky

// Sensor pins
int sensor1 = A4;
int sensor2 = A3;
int sensor3 = A2;
int sensor4 = A1;
int sensor5 = A0;

// Pushbutton pin
const int buttonPin = 7;

// LED pins (one per finger)
const int ledPins[5] = {8, 9, 10, 11, 12};

// Previous angles to detect motion
int previousAngles[5] = {90, 90, 90, 90, 90};

// Calibration data [finger][angleIndex]
int calibration[5][7] = {0};  // 5 fingers, 7 angles each

const int angles[] = {90, 105, 120, 135, 150, 165, 180};
const int numAngles = sizeof(angles) / sizeof(angles[0]);

void setup() {
  Serial.begin(9600);
  delay(500);

  // Attach servos
  servo1.attach(2);
  servo2.attach(3);
  servo3.attach(4);
  servo4.attach(5);
  servo5.attach(6);

  // Initial servo position
  servo1.write(90);
  servo2.write(90);
  servo3.write(90);
  servo4.write(90);
  servo5.write(90);

  pinMode(buttonPin, INPUT_PULLUP);

  // Set LED pins as output and turn off initially
  for (int i = 0; i < 5; i++) {
    pinMode(ledPins[i], OUTPUT);
    digitalWrite(ledPins[i], LOW);
  }
}

void loop() {
  if (digitalRead(buttonPin) == LOW) {
    enterCalibrationMode();
  } else {
    runNormalOperation();
  }
}

void enterCalibrationMode() {
  Serial.println("Entering calibration mode...");

  int avgValues[5][numAngles];

  for (int i = 0; i < numAngles; i++) {
    int angle = angles[i];

    Serial.println();
    Serial.print("Prepare hand at ");
    Serial.print(angle);
    Serial.println(" degrees.");
    delay(2000);

    Serial.println("Starting in:");
    for (int countdown = 5; countdown > 0; countdown--) {
      Serial.println(countdown);
      delay(1000);
    }

    Serial.println("Hold position...");
    long sum[5] = {0};

    for (int sec = 10; sec > 0; sec--) {
      long tempSum[5] = {0};

      for (int s = 0; s < 10; s++) {
        tempSum[0] += analogRead(sensor1);
        tempSum[1] += analogRead(sensor2);
        tempSum[2] += analogRead(sensor3);
        tempSum[3] += analogRead(sensor4);
        tempSum[4] += analogRead(sensor5);
        delay(100);
      }

      for (int f = 0; f < 5; f++) {
        sum[f] += tempSum[f];
      }

      Serial.print("Seconds left: ");
      Serial.println(sec - 1);
    }

    for (int f = 0; f < 5; f++) {
      avgValues[f][i] = sum[f] / 100;
      calibration[f][i] = avgValues[f][i];
    }
  }

  Serial.println("\n--- Calibration Results ---");
  Serial.print("Angle\tThumb\tIndex\tMiddle\tRing\tPinky\n");
  for (int i = 0; i < numAngles; i++) {
    Serial.print(angles[i]);
    Serial.print("\t");
    for (int f = 0; f < 5; f++) {
      Serial.print(calibration[f][i]);
      Serial.print("\t");
    }
    Serial.println();
  }

  Serial.println("Calibration complete.\n");
}

void runNormalOperation() {
  delay(500);  // Read every 0.5 seconds

  int sensorVals[5] = {
    analogRead(sensor1),
    analogRead(sensor2),
    analogRead(sensor3),
    analogRead(sensor4),
    analogRead(sensor5)
  };

  Serial.println("--- Sensor Readings ---");
  Serial.print("Thumb: ");  Serial.println(sensorVals[0]);
  Serial.print("Index: ");  Serial.println(sensorVals[1]);
  Serial.print("Middle: "); Serial.println(sensorVals[2]);
  Serial.print("Ring: ");   Serial.println(sensorVals[3]);
  Serial.print("Pinky: ");  Serial.println(sensorVals[4]);

  int targetAngles[5] = {90, 90, 90, 90, 90};

  for (int f = 0; f < 5; f++) {
    int minDiff = 1023;
    int closestAngle = 90;

    for (int i = 0; i < numAngles; i++) {
      int diff = abs(sensorVals[f] - calibration[f][i]);
      if (diff < minDiff) {
        minDiff = diff;
        closestAngle = angles[i];
      }
    }

    targetAngles[f] = closestAngle;
  }

  // Move servos and control LEDs
  servo1.write(targetAngles[0]);
  servo2.write(targetAngles[1]);
  servo3.write(targetAngles[2]);
  servo4.write(targetAngles[3]);
  servo5.write(targetAngles[4]);

  for (int i = 0; i < 5; i++) {
    if (targetAngles[i] != previousAngles[i]) {
      digitalWrite(ledPins[i], HIGH);
    } else {
      digitalWrite(ledPins[i], LOW);
    }
    previousAngles[i] = targetAngles[i];
  }
}
